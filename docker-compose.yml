version: '2'

services:
  
  redis:
    image: redis:6.2.5
    hostname: redis
    container_name: redis
    command: redis-server
    ports:
      - "6379:6379"
  
  Gios-Api-Dapr-Redis:
    image: "daprio/daprd:1.5.0"
    hostname: gios_dapr_redis
    container_name: gios_dapr_redis
    command: [
      "./daprd",
      "-app-id", "GiosApiDaprRedis",
      "-app-port", "8090",
      "-components-path", "/components",
      "-log-level", "debug"]
    volumes:
      - "./dapr/components/:/components"

  
  elastic_search_2:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2
    container_name: elastic_search_2
    hostname: elastic_search_2
    ports:
      - 9200:9200
      - 9300:9300
#    volumes:
#      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    networks:
      - elastic_kibana
   
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.9.2
    ports:
      - 5601:5601
#    depends_on:
#      - elastic_search_2
    environment:
      - "ELASTICSEARCH_URL=http://elastic_kibana:9200"
      - "XPACK_GRAPH_ENABLED=false"
      - "XPACK_ML_ENABLED=false"
      - "XPACK_REPORTING_ENABLED=false"
      - "XPACK_SECURITY_ENABLED=false"
      - "XPACK_WATCHER_ENABLED=false"
    networks:
      - elastic_kibana
    links:
      - elastic_search_2:elasticsearch
  
  zookeeper:
    image: wurstmeister/zookeeper
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_CLUSTER_ID: kafka-cluster
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
      KAFKA_CREATE_TOPICS: 'GiosTopic:1:1'
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    links:
      - zookeeper
  
  database:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: ms-sql
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      # user: sa
      - SA_PASSWORD=@Qwert123456789
      - MSSQL_PID=Developer
        
  postgresql:
    image: "clkao/postgres-plv8:latest"
    hostname: postgres
    container_name: postgres
    ports:
      - "5433:5432"
    # Username=postgres
    # password=postgres
    
# docker network create -d bridge elastic
networks:
  elastic_kibana:
    driver: bridge
    
volumes:
  zookeeper-data:
    driver: local
  zookeeper-log:
    driver: local
  kafka-data:
    driver: local
  elasticsearch-data:
